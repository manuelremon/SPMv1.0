┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                                                      ┃
┃            🚀 INICIO RÁPIDO - PLANIFICACIÓN 🚀       ┃
┃                                                      ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛


⚡ EN 3 MINUTOS
═════════════════════════════════════════════════════════════════

1️⃣ INICIA FLASK (Terminal)
───────────────────────────────────────────────────────────────
  cd d:\GitHub\SPMv1.0
  python -m flask --app src.backend.app:create_app run --port 5000

   Espera el mensaje:
   * Running on http://127.0.0.1:5000

2️⃣ ABRE EL NAVEGADOR
───────────────────────────────────────────────────────────────
  http://localhost:5000/home.html

   Deberías ver: Login page de SPM

3️⃣ ENTRA CON CREDENCIALES DEMO
───────────────────────────────────────────────────────────────
  Username: planificador
  Password: a1
  
  Click: "Entrar"

4️⃣ NAVEGA A PLANIFICACIÓN
───────────────────────────────────────────────────────────────
  Menú lateral izquierdo → "🗂️ Planificación"
  
  ¡Listo! Deberías ver el módulo cargado 🎉


✅ VERIFICACIÓN
═════════════════════════════════════════════════════════════════

Marca lo que ves:

  [ ] Página carga sin cambiar URL
  [ ] Menú lateral visible
  [ ] 4 tarjetas de estadísticas (Pendientes, En Proceso, etc)
  [ ] Tabla de solicitudes
  [ ] Botones funcionan (Ver, Anterior, Siguiente)
  [ ] Panel de detalles se expande
  [ ] Console sin errores (F12 → Console)

Si todo funciona: ✅ ÉXITO


❓ SI ALGO FALLA
═════════════════════════════════════════════════════════════════

Error: "no se abre nada"
  → Verifica que Flask está corriendo en terminal
  → Recarga la página (F5)
  → Verifica console (F12)

Error: "HTTP 404"
  → Flask no tiene las rutas registradas
  → Reinicia Flask (Ctrl+C, luego ejecuta comando otra vez)

Error: "HTTP 401"
  → Token expirado o inválido
  → Haz logout y login nuevamente

Error: "Acceso denegado"
  → Usuario no tiene rol "Planificador"
  → Usa las credenciales: planificador / a1

Tabla en blanco:
  → Puede no haber solicitudes en BD
  → Es normal, solo significa que no hay datos
  → Verifica console para errores


📊 ESTRUCTURA DEL MÓDULO
═════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────┐
│ 🗂️ Gestión de Planificación             │
│ Abastecimiento optimizado...            │
├─────────────────────────────────────────┤
│ ⏳ Pendientes: 5  | ⚙️ En Proceso: 3   │
│ ✨ Optimizadas: 8 | ✅ Completadas: 42  │
├─────────────────────────────────────────┤
│ 📋 Solicitudes por Procesar             │
│ [ID] [Centro] [Sector] ... [Ver]        │
│ 123  Centro A TI       ...  [Ver]       │
│ 124  Centro B Ops      ...  [Ver]       │
│ [Anterior] Página 1 [Siguiente]         │
├─────────────────────────────────────────┤
│ 📄 Detalles de Solicitud (al expandir)  │
│ Centro: ... Sector: ...                 │
│ 🔗 Consolidación | 💰 Ahorro            │
│ 📦 Materiales ...                       │
│ [✨ Optimizar] [✕ Cerrar]              │
└─────────────────────────────────────────┘


🎮 FUNCIONALIDADES
═════════════════════════════════════════════════════════════════

Estadísticas:
  ✅ Muestra conteos en tiempo real
  ✅ 4 tarjetas con iconos coloridos

Tabla de Solicitudes:
  ✅ ID, Centro, Sector, Criticidad
  ✅ Items, Monto total, Estado
  ✅ Botón Ver para detalles

Paginación:
  ✅ Anterior/Siguiente
  ✅ Indicador de página
  ✅ 10 solicitudes por página

Detalles:
  ✅ Información completa de solicitud
  ✅ Análisis de optimización (4 cuadrantes)
  ✅ Lista de materiales
  ✅ Botón para optimizar

Actualización:
  ✅ Botón refresh para recargar
  ✅ Datos siempre frescos desde API


🔌 ENDPOINTS DISPONIBLES
═════════════════════════════════════════════════════════════════

GET /api/planner/dashboard
  → Retorna: { pending, in_process, optimized, completed }
  → Uso: Cargar estadísticas

GET /api/planner/solicitudes?page=1&per_page=10
  → Retorna: { solicitudes[], total, page, per_page }
  → Uso: Llenar tabla con paginación

GET /api/planner/solicitudes/<id>
  → Retorna: { id, centro, sector, materiales[], ... }
  → Uso: Expandir detalles de solicitud

POST /api/planner/solicitudes/<id>/optimize
  → Retorna: { success, message }
  → Uso: Optimizar solicitud


📁 ARCHIVOS IMPORTANTES
═════════════════════════════════════════════════════════════════

Código:
  src/frontend/home.html (5229 líneas)
    - Módulo Planificación integrado
    - HTML + CSS + JavaScript todo en uno

  src/backend/routes/planner_routes.py (173 líneas)
    - APIs para planificación
    - Autenticación y autorización

Utilidades:
  create_planner_demo.py (61 líneas)
    - Crear usuarios demo
    - Ejecutable nuevamente cuando necesites

Documentación:
  PLANNER_DEMO_CREDENTIALS.txt
    - Credenciales de login

  TESTING_MANUAL_PLANIFICACION.md
    - Guía detallada de testing

  PLANIFICACION_INTEGRATION_COMPLETE.md
    - Documentación técnica

  PLANIFICACION_FLUJO_VISUAL.md
    - Diagramas del flujo

  QUICK_REFERENCE_PLANIFICACION.txt
    - Referencia rápida


💡 CONSEJOS
═════════════════════════════════════════════════════════════════

• Si cambias código de home.html, recarga el navegador (F5)
• Si cambias código backend, reinicia Flask (Ctrl+C, run again)
• Abre Console (F12) para ver logs de debug
• Los logs tienen formato: [planner] Mensaje
• Si necesitas más datos, agrega solicitudes a la BD
• El usuario demo es para desarrollo, crea otros para producción


🔐 SEGURIDAD
═════════════════════════════════════════════════════════════════

El usuario demo:
  ✅ Tiene rol "Planificador"
  ✅ Contraseña hasheada (PBKDF2-SHA256)
  ✅ Acceso restringido a /api/planner/*
  ✅ Requiere JWT válido para cada request

No es seguro en producción porque:
  ❌ Contraseña muy simple (a1)
  ❌ Es demo/testing
  ❌ localhost sin HTTPS

Para producción:
  ✅ Usa contraseñas fuertes (12+ caracteres)
  ✅ Implementa HTTPS
  ✅ Usa variables de entorno
  ✅ Implementa rate limiting


📞 HELP
═════════════════════════════════════════════════════════════════

¿Qué hacer si...?

... la página no carga?
  1. Verifica que Flask está corriendo
  2. Recarga (F5)
  3. Abre Console (F12) para ver errores

... veo HTTP 404?
  1. Reinicia Flask
  2. Espera "Running on http://127.0.0.1:5000"
  3. Recarga

... veo HTTP 401?
  1. Logout y login nuevamente
  2. Usa: planificador / a1

... la tabla está vacía?
  1. Es normal, significa no hay solicitudes en BD
  2. Verifica Console para errores
  3. Si hay error, reporta

... los botones no funcionan?
  1. Recarga la página (F5)
  2. Verifica Console para JavaScript errors
  3. Si ves "[planner] Error", revisa qué dice


🎯 PRÓXIMO PASO
═════════════════════════════════════════════════════════════════

1. Sigue los pasos de "EN 3 MINUTOS" arriba
2. Verifica la checklist de "VERIFICACIÓN"
3. Abre Console (F12) para ver logs detallados
4. Lee TESTING_MANUAL_PLANIFICACION.md para testing completo


✅ ¡Listo!
═════════════════════════════════════════════════════════════════

Deberías tener el módulo de Planificación funcionando completamente.

Si algo falla, revisa los "Consejos" y "Help" arriba.

¡Disfruta! 🚀

