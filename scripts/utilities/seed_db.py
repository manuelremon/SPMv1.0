#!/usr/bin/env python3
"""
Script para generar datos iniciales en la base de datos SPM.
Esto crear√° datos m√≠nimos para prueba de la aplicaci√≥n.
"""

import sqlite3
from pathlib import Path
from datetime import datetime, timedelta
import json

db_path = Path("src/backend/core/data/spm.db")

if not db_path.exists():
    print(f"‚ùå Base de datos no encontrada: {db_path}")
    exit(1)

conn = sqlite3.connect(str(db_path))
cursor = conn.cursor()

print("\n" + "="*80)
print("GENERADOR DE DATOS INICIALES - SPM")
print("="*80 + "\n")

# 1. Agregar usuarios de prueba
print("1. Insertando usuarios de prueba...")

usuarios = [
    ("admin001", "Administrador", "Sistema", "admin", "1234", "admin@spm.local", "Administrador", None, None, None, None, None, None, "activo", None),
    ("empl001", "Juan", "P√©rez", "empleado", "1234", "juan@spm.local", "Empleado", "IT", "C001", None, None, None, None, "activo", None),
    ("empl002", "Mar√≠a", "Garc√≠a", "empleado", "1234", "maria@spm.local", "Empleado", "RRHH", "C001", None, None, None, None, "activo", None),
    ("aprobador001", "Carlos", "L√≥pez", "aprobador", "1234", "carlos@spm.local", "Aprobador", None, None, None, None, None, None, "activo", None),
    ("planificador001", "Ana", "Mart√≠nez", "planificador", "1234", "ana@spm.local", "Planificador", None, None, None, None, None, None, "activo", None),
]

try:
    cursor.executemany("""
        INSERT OR IGNORE INTO usuarios 
        (id_spm, nombre, apellido, rol, contrasena, mail, posicion, sector, centros, jefe, gerente1, gerente2, telefono, estado_registro, id_ypf)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, usuarios)
    conn.commit()
    print(f"   ‚úì {len(usuarios)} usuarios insertados")
except Exception as e:
    print(f"   ‚úó Error: {e}")
    conn.rollback()

# 2. Agregar cat√°logo de centros
print("\n2. Insertando centros...")

centros = [
    (1, "C001", "Centro Principal", "Oficina central de operaciones", "Planta principal", 1),
    (2, "C002", "Centro Secundario", "Sucursal de operaciones", "Planta secundaria", 1),
    (3, "C003", "Centro Log√≠stico", "Centro de distribuci√≥n", "Almac√©n central", 1),
]

now = datetime.now().isoformat()

try:
    for idx, cod, nom, desc, notas, activo in centros:
        cursor.execute("""
            INSERT OR IGNORE INTO catalog_centros 
            (codigo, nombre, descripcion, notas, activo, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (cod, nom, desc, notas, activo, now, now))
    conn.commit()
    print(f"   ‚úì {len(centros)} centros insertados")
except Exception as e:
    print(f"   ‚úó Error: {e}")
    conn.rollback()

# 3. Agregar sectores
print("\n3. Insertando sectores...")

sectores = [
    ("IT", "Tecnolog√≠a e Inform√°tica", "Departamento de sistemas", 1),
    ("RRHH", "Recursos Humanos", "Gesti√≥n de personal", 1),
    ("FINANZAS", "Finanzas", "Gesti√≥n financiera", 1),
    ("OPERACIONES", "Operaciones", "Gesti√≥n operacional", 1),
    ("MANTENIMIENTO", "Mantenimiento", "Mantenimiento de equipos", 1),
]

try:
    for nom, desc, _, activo in sectores:
        cursor.execute("""
            INSERT OR IGNORE INTO catalog_sectores 
            (nombre, descripcion, activo, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?)
        """, (nom, desc, activo, now, now))
    conn.commit()
    print(f"   ‚úì {len(sectores)} sectores insertados")
except Exception as e:
    print(f"   ‚úó Error: {e}")
    conn.rollback()

# 4. Agregar almacenes
print("\n4. Insertando almacenes...")

almacenes = [
    ("ALM001", "Almac√©n Central", "C001", "Almac√©n principal de inventario", 1),
    ("ALM002", "Almac√©n Secundario", "C002", "Almac√©n de respaldo", 1),
    ("ALM003", "Almac√©n Temporal", "C003", "Almac√©n temporal de tr√°nsito", 1),
]

try:
    for cod, nom, cent, desc, activo in almacenes:
        cursor.execute("""
            INSERT OR IGNORE INTO catalog_almacenes 
            (codigo, nombre, centro_codigo, descripcion, activo, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (cod, nom, cent, desc, activo, now, now))
    conn.commit()
    print(f"   ‚úì {len(almacenes)} almacenes insertados")
except Exception as e:
    print(f"   ‚úó Error: {e}")
    conn.rollback()

# 5. Agregar roles
print("\n5. Insertando roles...")

roles = [
    ("admin", "Administrador del sistema", 1),
    ("empleado", "Empleado regular", 1),
    ("aprobador", "Aprobador de solicitudes", 1),
    ("planificador", "Planificador de compras", 1),
    ("jefe_centro", "Jefe de centro", 1),
]

try:
    for nom, desc, activo in roles:
        cursor.execute("""
            INSERT OR IGNORE INTO catalog_roles 
            (nombre, descripcion, activo, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?)
        """, (nom, desc, activo, now, now))
    conn.commit()
    print(f"   ‚úì {len(roles)} roles insertados")
except Exception as e:
    print(f"   ‚úó Error: {e}")
    conn.rollback()

# 6. Agregar puestos
print("\n6. Insertando puestos...")

puestos = [
    ("T√©cnico", "T√©cnico de sistemas", 1),
    ("Especialista", "Especialista en tecnolog√≠a", 1),
    ("Gerente", "Gerente de proyecto", 1),
    ("Operario", "Operario de almac√©n", 1),
]

try:
    for nom, desc, activo in puestos:
        cursor.execute("""
            INSERT OR IGNORE INTO catalog_puestos 
            (nombre, descripcion, activo, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?)
        """, (nom, desc, activo, now, now))
    conn.commit()
    print(f"   ‚úì {len(puestos)} puestos insertados")
except Exception as e:
    print(f"   ‚úó Error: {e}")
    conn.rollback()

# 7. Agregar materiales
print("\n7. Insertando materiales...")

materiales = [
    ("MAT001", "Computadora Port√°til", "Laptop marca XYZ 15 pulgadas", "C001", "IT", "UNIDAD", 1200.00),
    ("MAT002", "Monitor LED", "Monitor 24 pulgadas Full HD", "C001", "IT", "UNIDAD", 300.00),
    ("MAT003", "Teclado Inal√°mbrico", "Teclado mec√°nico inal√°mbrico", "C001", "IT", "UNIDAD", 80.00),
    ("MAT004", "Mouse √ìptico", "Mouse √≥ptico con USB", "C001", "IT", "UNIDAD", 25.00),
    ("MAT005", "Cable HDMI", "Cable HDMI 5 metros", "C001", "IT", "UNIDAD", 15.00),
    ("MAT006", "Papel Bond", "Resma de papel bond A4", "C002", "RRHH", "RESMA", 5.00),
    ("MAT007", "Bol√≠grafos", "Caja de 50 bol√≠grafos azules", "C002", "RRHH", "CAJA", 10.00),
]

try:
    for cod, desc, desc_larga, centro, sector, unidad, precio in materiales:
        cursor.execute("""
            INSERT OR IGNORE INTO materiales 
            (codigo, descripcion, descripcion_larga, centro, sector, unidad, precio_usd)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (cod, desc, desc_larga, centro, sector, unidad, precio))
    conn.commit()
    print(f"   ‚úì {len(materiales)} materiales insertados")
except Exception as e:
    print(f"   ‚úó Error: {e}")
    conn.rollback()

# 8. Agregar presupuestos
print("\n8. Insertando presupuestos...")

presupuestos = [
    ("C001", "IT", 50000.00, 50000.00),
    ("C001", "RRHH", 10000.00, 10000.00),
    ("C002", "OPERACIONES", 30000.00, 30000.00),
    ("C003", "MANTENIMIENTO", 15000.00, 15000.00),
]

try:
    for centro, sector, monto, saldo in presupuestos:
        cursor.execute("""
            INSERT OR IGNORE INTO presupuestos 
            (centro, sector, monto_usd, saldo_usd)
            VALUES (?, ?, ?, ?)
        """, (centro, sector, monto, saldo))
    conn.commit()
    print(f"   ‚úì {len(presupuestos)} presupuestos insertados")
except Exception as e:
    print(f"   ‚úó Error: {e}")
    conn.rollback()

# 9. Agregar planificadores
print("\n9. Insertando planificadores...")

planificadores = [
    ("planificador001", "Planificador Principal", 1),
]

try:
    for user_id, nombre, activo in planificadores:
        cursor.execute("""
            INSERT OR IGNORE INTO planificadores 
            (usuario_id, nombre, activo, created_at)
            VALUES (?, ?, ?, ?)
        """, (user_id, nombre, activo, now))
    conn.commit()
    print(f"   ‚úì {len(planificadores)} planificadores insertados")
except Exception as e:
    print(f"   ‚úó Error: {e}")
    conn.rollback()

conn.close()

print("\n" + "="*80)
print("‚úÖ Datos iniciales generados exitosamente")
print("="*80 + "\n")

# Mostrar resumen
conn = sqlite3.connect(str(db_path))
cursor = conn.cursor()

print("üìä RESUMEN DE DATOS:")
cursor.execute("SELECT COUNT(*) FROM usuarios")
print(f"  ‚Ä¢ Usuarios: {cursor.fetchone()[0]}")
cursor.execute("SELECT COUNT(*) FROM catalog_centros")
print(f"  ‚Ä¢ Centros: {cursor.fetchone()[0]}")
cursor.execute("SELECT COUNT(*) FROM catalog_sectores")
print(f"  ‚Ä¢ Sectores: {cursor.fetchone()[0]}")
cursor.execute("SELECT COUNT(*) FROM catalog_almacenes")
print(f"  ‚Ä¢ Almacenes: {cursor.fetchone()[0]}")
cursor.execute("SELECT COUNT(*) FROM materiales")
print(f"  ‚Ä¢ Materiales: {cursor.fetchone()[0]}")
cursor.execute("SELECT COUNT(*) FROM presupuestos")
print(f"  ‚Ä¢ Presupuestos: {cursor.fetchone()[0]}")

conn.close()

print("\n" + "="*80)
print("Ahora puedes probar la aplicaci√≥n con estos datos iniciales")
print("="*80 + "\n")
